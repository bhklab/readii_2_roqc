from damply import dirs as dmpdirs
from pathlib import Path

# could alternatively pass this in the CLI via `--configfile $CONFIG/config.yaml`
# configfile: dmpdirs.CONFIG / "datasets" / "NSCLC-Radiomics_test.yaml"

COMBINED_DATA_NAME = config["DATA_SOURCE"] + "_" + config["DATASET_NAME"]

include: "scripts/mit/run_mit.smk"

rule all:
    # Target rule
    input:
        mit_autopipeline_index=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "images" / f"mit_{config["DATASET_NAME"]}" / f"mit_{config["DATASET_NAME"]}_index.csv",
        mit_niftis_directory=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "images" / f"mit_{config["DATASET_NAME"]}",
        readii_images_directory=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "images" / f"readii_{config["DATASET_NAME"]}",
        feature_extraction_index_file=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "features" / f"{config["EXTRACTION"]["METHOD"]}" / f"{config["EXTRACTION"]["METHOD"]}_{config["DATASET_NAME"]}_index.csv",
        extracted_sample_features_dir=directory(dmpdirs.PROCDATA / COMBINED_DATA_NAME / "features" / config["EXTRACTION"]["METHOD"] / Path(config["EXTRACTION"]["CONFIG"]).stem),
        extracted_dataset_features_dir=directory(dmpdirs.RESULTS / COMBINED_DATA_NAME / "features" / config["EXTRACTION"]["METHOD"] / Path(config["EXTRACTION"]["CONFIG"]).stem)



rule run_readii:
    input:
        mit_autopipeline_index=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "images" / f"mit_{config["DATASET_NAME"]}" / f"mit_{config["DATASET_NAME"]}_index.csv",
        mit_niftis_directory=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "images" / f"mit_{config["DATASET_NAME"]}",
        
    output:
        readii_images_directory=directory(dmpdirs.PROCDATA / COMBINED_DATA_NAME / "images" / f"readii_{config["DATASET_NAME"]}"),
        readii_index_file=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "images" / f"readii_{config["DATASET_NAME"]}" / f"readii_{config["DATASET_NAME"]}_index.csv",
    params:
        dataset=config["DATASET_NAME"],
        seed=config["RANDOM_SEED"]
    shell:
        "python workflow/scripts/readii/make_negative_controls.py --dataset {params.dataset} --overwrite True --seed {params.seed}"


rule run_index:
    input:
        mit_simple_index_file=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "images" / f"mit_{config["DATASET_NAME"]}" / f"mit_{config["DATASET_NAME"]}_index-simple.csv",
        readii_index_file=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "images" / f"readii_{config["DATASET_NAME"]}" / f"readii_{config["DATASET_NAME"]}_index.csv"
    output:
        feature_extraction_index_file=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "features" / f"{config["EXTRACTION"]["METHOD"]}" / f"{config["EXTRACTION"]["METHOD"]}_{config["DATASET_NAME"]}_index.csv"
    params:
        dataset=config["DATASET_NAME"],
        method=config["EXTRACTION"]["METHOD"]
    shell:
        "python workflow/scripts/feature_extraction/index.py --dataset {params.dataset} --method {params.method}"


rule run_extract:
    input:
        feature_extraction_index_file=dmpdirs.PROCDATA / COMBINED_DATA_NAME / "features" / f"{config["EXTRACTION"]["METHOD"]}" / f"{config["EXTRACTION"]["METHOD"]}_{config["DATASET_NAME"]}_index.csv",
        settings_file=dmpdirs.CONFIG / config["EXTRACTION"]["METHOD"] / config["EXTRACTION"]["CONFIG"]
    output:
        extracted_sample_features_dir=directory(dmpdirs.PROCDATA / COMBINED_DATA_NAME / "features" / config["EXTRACTION"]["METHOD"] / Path(config["EXTRACTION"]["CONFIG"]).stem),
        extracted_dataset_features_dir=directory(dmpdirs.RESULTS / COMBINED_DATA_NAME / "features" / config["EXTRACTION"]["METHOD"] / Path(config["EXTRACTION"]["CONFIG"]).stem)
    params:
        dataset=config["DATASET_NAME"],
        method=config["EXTRACTION"]["METHOD"],
        settings=config["EXTRACTION"]["CONFIG"]
    shell:
        "python workflow/scripts/feature_extraction/extract.py --dataset {params.dataset} --method {params.method} --settings {params.settings}"
        